{"mappings":"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","sources":["index.ts"],"sourcesContent":["import { getRPC, methods } from \"@neuraiproject/neurai-rpc\";\n\nconst ONE_FULL_COIN = 1e8;\n\nconst URL_MAINNET = \"https://rpc-main.neurai.org/rpc\";\nconst URL_TESTNET = \"https://rpc-testnet.neurai.org/rpc\";\n\nlet username = \"anonymous\";\nlet password = \"anonymous\";\nlet url = URL_MAINNET;\n\nlet rpc = getRPC(username, password, url);\n\nfunction resetRPC() {\n  rpc = getRPC(username, password, url);\n  return rpc;\n}\nfunction setURL(newURL: string) {\n  url = newURL;\n  resetRPC();\n}\nfunction setUsername(newUsername: string) {\n  username = newUsername;\n  resetRPC();\n}\nfunction setPassword(newPassword: string) {\n  password = newPassword;\n  resetRPC();\n}\n\n/**\n  * \n  * @param assetName mandatory\n  * @param onlytotal otional, when false result is just a list of addresses with balances -- when true the result is just a single number representing the number of addresses\n  * @param count (integer, optional, default=50000, MAX=50000) truncates results to include only the first _count_ assets found\n  * @param start (integer, optional, default=0) results skip over the first _start_ assets found (if negative it skips back from the end)\n  \n  */\nfunction getAddressesByAsset(\n  assetName: string,\n  onlytotal?: boolean,\n  count?: number,\n  start?: boolean\n): Promise<any> {\n  const _onlytotal = onlytotal === undefined ? false : onlytotal;\n  let _count = count === undefined ? 5000 : count;\n  let _start = start === undefined ? 0 : start;\n  if (_count > 50000) {\n    _count = 50000;\n  }\n\n  return rpc(methods.listaddressesbyasset, [\n    assetName,\n    _onlytotal,\n    _count,\n    _start,\n  ]);\n}\n\nfunction getAddressDeltas(address: string | string[]): Promise<any[]> {\n  const addresses = turnIntoStringArray(address);\n  const assetName = \"\"; //Must be empty string, NOT \"*\"\n  const deltas = rpc(methods.getaddressdeltas, [{ addresses, assetName }]);\n  return deltas;\n}\n\nfunction getAddressMempool(address: string | string[]): Promise<any> {\n  const addresses = turnIntoStringArray(address); //Support both string and string array\n\n  const includeAssets = true;\n  return rpc(methods.getaddressmempool, [\n    { addresses: addresses },\n    includeAssets,\n  ]);\n}\nfunction getAddressUTXOs(address: string | string[]): Promise<any> {\n  const addresses = turnIntoStringArray(address); //Support both string and string array\n  return rpc(methods.getaddressutxos, [{ addresses: addresses }]);\n}\nfunction getAllAssets(\n  prefix: string = \"*\",\n  includeAllMetaData: boolean = false\n): Promise<any> {\n  return rpc(methods.listassets, [prefix, includeAllMetaData]);\n}\n\nfunction getAssetBalance(address: string | string[]): Promise<any> {\n  const addresses = turnIntoStringArray(address);\n  const includeAssets = true;\n  return rpc(methods.getaddressbalance, [\n    { addresses: addresses },\n    includeAssets,\n  ]);\n}\n\nfunction getAsset(name: string): Promise<any> {\n  return rpc(methods.getassetdata, [name]);\n}\nfunction getBestBlockHash(): Promise<string> {\n  return rpc(methods.getbestblockhash, []);\n}\n\nfunction getBlockByHash(hash: string): Promise<any> {\n  return rpc(methods.getblock, [hash]);\n}\nfunction getBlockByHeight(height: number): Promise<any> {\n  return rpc(methods.getblockhash, [height]).then((hash) => {\n    const verbosity = 3; //include transactions\n    const block = rpc(methods.getblock, [hash, verbosity]);\n    return block;\n  });\n}\nfunction getMempool() {\n  return rpc(methods.getrawmempool, [true]);\n}\n\nfunction getNeuraiBalance(address: string | string[]): Promise<any> {\n  const addresses = turnIntoStringArray(address);\n  if (!addresses || addresses.length < 1) {\n    const emptyObject = {};\n    return Promise.resolve(emptyObject);\n  }\n  const includeAssets = false;\n  const params = [{ addresses: addresses }, includeAssets];\n  return rpc(methods.getaddressbalance, params);\n}\n\nfunction getTransaction(id: string): Promise<any> {\n  const verbose = true;\n  return rpc(methods.getrawtransaction, [id, verbose]);\n}\n\nfunction verifyMessage(\n  address: string,\n  signature: string,\n  message: string\n): Promise<boolean> {\n  const params = [address, signature, message];\n  return rpc(methods.verifymessage, params);\n}\n\nfunction turnIntoStringArray(str: string | string[]): string[] {\n  if (typeof str === \"string\") {\n    return [str];\n  }\n  return str;\n}\n\nexport default {\n  getAddressesByAsset,\n  getAddressDeltas,\n  getAddressMempool,\n  getAddressUTXOs,\n  getAllAssets,\n  getAsset,\n  getAssetBalance,\n  getBestBlockHash,\n  getBlockByHash,\n  getBlockByHeight,\n  getMempool,\n  getNeuraiBalance,\n  getTransaction,\n  setUsername,\n  setPassword,\n  setURL,\n  verifyMessage,\n\n  URL_MAINNET,\n  URL_TESTNET,\n};\n"],"names":[],"version":3,"file":"index.cjs.map"}